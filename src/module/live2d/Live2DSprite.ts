import Live2DModel from '@/core/live2d/Live2DModel';
import { Renderer, Texture } from '@pixi/core';
import { Container } from '@pixi/display';

interface CustomBaseTexture extends PIXI.BaseTexture {
    // property exposed from Pixi's source
    _glTextures: { [key: number]: PIXI.GLTexture };

    // a flag representing if this texture has been bound to Live2DModel
    bound?: boolean;
}

interface Live2DSprite {
    emit(event: 'hit', hitAreaName: string): boolean;

    emit(event: 'motion', group: string, index: number): boolean;
}

class Live2DSprite extends Container {
    id!: number;

    textures: Texture[];

    // temporary 4x4 matrix
    // prettier-ignore
    modelTransform = new Float32Array([
        1, 0, 0, 0,
        0, 1, 0, 0,
        0, 0, 1, 0,
        0, 0, 0, 1,
    ]);

    /** The scale from WebGL's context size to model's logical size. */
    drawingScaleX = 1;
    drawingScaleY = 1;

    static async create(modelSettingsFile: string) {
        const model = await Live2DModel.create(modelSettingsFile);
        return new Live2DSprite(model);
    }

    private constructor(public model: Live2DModel) {
        super();

        this.textures = model.modelSettings.textures.map(file => {
            const texture = Texture.from(file);
            texture.baseTexture.on('loaded', (baseTexture: PIXI.BaseTexture) => {
                // console.warn(baseTexture._glTextures);
                // model.bindTexture()
            });
            return texture;
        });

        const originalFn = model.motionManager.startMotionByPriority.bind(model.motionManager);

        /**
         * @fires Live2DSprite#motion
         */
        model.motionManager.startMotionByPriority = async (group, index, priority) => {
            const started = await originalFn(group, index, priority);
            if (started) {
                this.emit('motion', group, index);
            }
            return started;
        };
    }

    /**
     * Performs hit action on sprite.
     *
     * @param x - The x position in world space.
     * @param y - The y position in world space.
     *
     * @fires Live2DSprite#hit
     */
    hit(x: number, y: number) {
        this.model
            .hitTest((x - this.position.x) / this.scale.x, (y - this.position.y) / this.scale.y)
            .forEach(hitAreaName => this.emit('hit', hitAreaName));
    }

    _calculateBounds() {
        this._bounds.addFrame(this.transform, 0, 0, this.model.width, this.model.height);
    }

    _render(renderer: Renderer) {
        // must flush the batch system before resetting renderer, otherwise there will be weird issues when using
        //  two or more instances of this sprite with any other batch-able DisplayObjects such as Graphics
        renderer.batch.flush();

        // IMPORTANT: resetting the renderer is the only way to make Live2D core's drawing methods
        //  compatible with Pixi's drawing system
        renderer.reset();

        // set flip Y for Live2D textures
        renderer.gl.pixelStorei(WebGLRenderingContext.UNPACK_FLIP_Y_WEBGL, true);

        for (let i = 0, baseTexture; i < this.textures.length; i++) {
            baseTexture = this.textures[i].baseTexture as CustomBaseTexture;

            // don't render if any of textures is not ready
            if (!baseTexture.valid) return;

            // manually bind the texture so it will be managed and automatically unbound (if necessary) by Pixi's TextureSystem
            renderer.texture.bind(baseTexture, i);

            if (!baseTexture.bound) {
                // bind the WebGLTexture generated by Pixi's TextureSystem
                // kind of ugly but this does the trick :/
                this.model.bindTexture(i, baseTexture._glTextures[(renderer as any).CONTEXT_UID].texture);
            }
        }

        this.updateTransform();

        this.drawingScaleX = this.model.logicalWidth / renderer.gl.drawingBufferWidth;
        this.drawingScaleY = -this.model.logicalHeight / renderer.gl.drawingBufferHeight; // flip Y

        const wt = this.transform.worldTransform;
        const transform = this.modelTransform;

        // put sprite's 3x3 matrix into model's 4x4 matrix
        transform[0] = wt.a * this.drawingScaleX;
        transform[1] = wt.c * this.drawingScaleY;
        transform[4] = wt.b * this.drawingScaleX;
        transform[5] = wt.d * this.drawingScaleY;
        transform[12] = wt.tx * this.drawingScaleX;
        transform[13] = wt.ty * this.drawingScaleY;

        this.model.update(transform);

        // maybe do `renderer.reset()` again?
    }
}

export default Live2DSprite;
